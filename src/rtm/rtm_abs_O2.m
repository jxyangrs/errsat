function KabsO2 = rtm_abs_O2(TEMP,PRES,VAPDEN,FREQ)
% O2 absorption based on Rosenkranz Diatomic Oxygen Absorption Model
% 
% Input: 
%       TEMP,       Temperature (K)
%       PRES,       Pressure (mb)
%       VAPDEN,     Water Vapor Density (g/m^3)
%       FREQ,       Frequency (GHz)
%
% Output: 
% Oxygen Absorption Coefficient (Np/km)
%
% Description:
%       This code is based on the Fortran code of Rosenkranz model of version 2020
%       http://cetemps.aquila.infn.it/mwrnet/lblmrt_ns.html
%       [DOI: 10.21982/M81013 ] Line-by-line microwave radiative transfer (non-scattering)

F=[118.7503 56.2648 62.4863 58.4466 60.3061 59.5910...
    59.1642 60.4348 58.3239 61.1506 57.6125 61.8002...
    56.9682 62.4112 56.3634 62.9980 55.7838 63.5685...
    55.2214 64.1278 54.6712 64.6789 54.1300 65.2241...
    53.5957 65.7648 53.0669 66.3021 52.5424 66.8368...
    52.0214 67.3696 51.5034 67.9009 368.4984 424.7632...
    487.2494 715.3931 773.8397 834.1458];

S300=[.2936e-14 .8079e-15 .2480e-14 .2228e-14...
    .3351e-14 .3292e-14 .3721e-14 .3891e-14...
    .3640e-14 .4005e-14 .3227e-14 .3715e-14...
    .2627e-14 .3156e-14 .1982e-14 .2477e-14...
    .1391e-14 .1808e-14 .9124e-15 .1230e-14...
    .5603e-15 .7842e-15 .3228e-15 .4689e-15...
    .1748e-15 .2632e-15 .8898e-16 .1389e-15...
    .4264e-16 .6899e-16 .1924e-16 .3229e-16...
    .8191e-17 .1423e-16 .6494e-15 .7083e-14 .3025e-14...
    .1835e-14 .1158e-13 .3993e-14];

BE=[.009 .015  .083 .084  .212 .212  .391 .391  .626 .626 ...
    .915 .915  1.260 1.260  1.660 1.665  2.119 2.115  2.624 2.625 ...
    3.194 3.194  3.814 3.814  4.484 4.484  5.224 5.224  6.004 6.004  6.844 6.844 ...
    7.744 7.744  .048  .044  .049  .145  .141  .145];

%WIDTHS IN MHZ/MB
WB300=.56; X=.8;
W300=[1.67  1.646  1.468  1.449  1.382  1.360 ...
    1.319  1.297  1.266  1.248  1.221  1.207  1.181  1.171 ...
    1.144  1.139  1.110  1.108  1.079  1.078  1.05 1.05 ...
    1.02 1.02 1.00 1.00 .97 .97 .94 .94 .92 .92 .89 .89  1.64 1.64 1.64...
    1.81 1.81 1.81];

Y300=[  -0.036   0.2408  -0.3486   0.5227 ...
    -0.5430   0.5877  -0.3970   0.3237  -0.1348   0.0311 ...
    0.0725  -0.1663   0.2832  -0.3629   0.3970  -0.4599 ...
    0.4695  -0.5199   0.5187  -0.5597   0.5903  -0.6246 ...
    0.6656  -0.6942   0.7086  -0.7325   0.7348  -0.7546 ...
    0.7702  -0.7864   0.8083  -0.8210   0.8439  -0.8529  ...
    0 0 0 0 0 0];

V=[  0.0079  -0.0978   0.0844  -0.1273 ...
    0.0699  -0.0776   0.2309  -0.2825   0.0436  -0.0584 ...
    0.6056  -0.6619   0.6451  -0.6759   0.6547  -0.6675 ...
    0.6135  -0.6139   0.2952  -0.2895   0.2654  -0.2590 ...
    0.3750  -0.3680   0.5085  -0.5002   0.6206  -0.6091 ...
    0.6526  -0.6393   0.6640  -0.6475   0.6729  -0.6545  ...
    0 0 0 0 0 0];

% setting
m = length(V); % num of spectra

% absorption 1 (1st from absorption spectra)
TH = 300./TEMP;
TH1 = TH-1.;
B = TH.^X;
PRESWV = VAPDEN.*TEMP./217.; 
PRESDA = PRES -PRESWV;
DEN = .001.*(PRESDA.*B + 1.1.*PRESWV.*TH);
DENS =.001.*(PRESDA.*TH.^0.9 + 1.1.*PRESWV.*TH);
DFNR = WB300*DEN;
clear PRESWV

abs = 1.6E-17*FREQ.^2.*DFNR./(TH.*(FREQ.^2 + DFNR.^2)); 
clear DFNR

% absorption 2 
% (intentionally use loop rather than vectorization, because (1) loop saves 
% memory; and (2) there is only 40-loop, which is even faster than 
% vecterzation when vectorization manipulates huge matrix)
for i = 1: m
    if i==1
        DF = W300(i)*DENS; % spectrum 1 = W300*DENS, 
    else
        DF = W300(i).*DEN; % spectra 2 to 40 = W300*DEN
    end
    Y = .001*PRES.*B.*(Y300(i)+V(i)*TH1);
    abs = abs + S300(i)*exp(-BE(i).*TH1).*((DF + (FREQ-F(i)).*Y)./((FREQ-F(i)).^2 + DF.^2)+(DF - (FREQ+F(i)).*Y)./((FREQ+F(i)).^2 + DF.^2)).*(FREQ./F(i)).^2; % one single equation
end

% sum up absorption 1 and 2
KabsO2 = .5034e12.*abs.*PRESDA.*TH.^3/pi;

